#!/bin/bash -x
(

# This script will install the puppet enterprise agent on a system and point it to the 
# puppet master specified in the run time configuration parameters screen.
# 
# We assume that all required packages have been installed on the instance.
# 
# Author: jlabocki@redhat.com
# Date:   10.26.12
# reference blueprint: /RedHat/blueprints/puppet_enterprise_agent
#
# Note that variables are mapped hard to application blueprints
#
# For example if the following parameter was in your application blueprint:
#       <services>
#        <service name="register_to_system_engine">
#          <executable url="http://172.16.0.50/test.sh"/>
#          <parameters>
#            <parameter name="sehost">
#              <value><![CDATA[systemengineFQDN]]></value>
#            </parameter>
#          </parameters>
#        </service>
#      </services>
# Then you would reference it in your script like this:
#  sehost=$AUDREY_VAR_register_to_system_engine_sehost
#  echo "sehost: " $sehost

# Set Variables from Audrey and hide some from the user

# Puppet Master we should register to
puppet_master=$AUDREY_VAR_puppet_enterprise_agent_puppet_master

# 
my_hostname=`hostname`

# Create directories and files
mkdir -p /etc/puppetlabs/facter/facts.d/

# Create installer.txt file and change values for environment
cat <<EOF > /etc/puppetlabs/facter/facts.d/puppet_enterprise_installer.txt
fact_stomp_port=61613
fact_stomp_server=${puppet_master}
fact_is_puppetagent=true
fact_is_puppetmaster=false
fact_is_puppetca=false
fact_is_puppetconsole=false
EOF

# Create puppet.conf and change values for environment
cat <<EOF > /etc/puppetlabs/puppet/puppet.conf
[main]
    vardir = /var/opt/lib/pe-puppet
    logdir = /var/log/pe-puppet
    rundir = /var/run/pe-puppet
    modulepath = /etc/puppetlabs/puppet/modules:/opt/puppet/share/puppet/modules
    user = pe-puppet
    group = pe-puppet
    archive_files = true
    archive_file_server = master

[agent]
    certname = ${my_hostname}
    server = ${puppet_master}
    report = true
    classfile = $vardir/classes.txt
    localconfig = $vardir/localconfig
    graph = true
    pluginsync = true
EOF


# Create this file and make it executable
cat <<EOF > /opt/puppet/sbin/refresh-mcollective-metadata
#! /bin/bash
set -e
set -u
# Write to a stage file because this may be a long process
/opt/puppet/bin/facter --puppet --yaml > /etc/puppetlabs/mcollective/facts.yaml.new
# Atomic update of the facts mcollective is using.
mv /etc/puppetlabs/mcollective/facts.yaml.new /etc/puppetlabs/mcollective/facts.yam
EOF

/bin/chmod +x /opt/puppet/sbin/refresh-mcollective-metadata


# Install crontab
cat <<EOF > /tmp/crontab
# HEADER: This file was autogenerated at Wed Oct 24 14:26:17 -0400 2012 by puppet.
# HEADER: While it can still be managed manually, it is definitely not recommended.
# HEADER: Note particularly that the comments starting with 'Puppet Name' should
# HEADER: not be deleted, as doing so could cause duplicate cron jobs.
# Puppet Name: pe-mcollective-metadata
0,15,30,45 * * * * /opt/puppet/sbin/refresh-mcollective-metadata
# Puppet Name: report_baseline
0 20 * * * PATH=/opt/puppet/bin:/bin:/usr/bin:/usr/sbin:/usr/local/bin /opt/puppet/bin/puppet inspect 1> /dev/null
EOF

crontab /tmp/crontab

# Start services
/etc/init.d/pe-mcollective start
/etc/init.d/pe-puppet start

# Make service start persistent
chkconfig pe-mcollective on
chkconfig pe-puppet on

) 2>&1 | tee /var/audrey/tooling/puppet_enterprise_agent.log

